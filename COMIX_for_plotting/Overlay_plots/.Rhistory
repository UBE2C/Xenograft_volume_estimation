} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = rownames(long_df), color = rownames(long_df))) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
#ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
##Transform the dataframes to a long format for plotting
plot_tumor_volumes = function(data, number_of_measurements, number_of_samples, dates, formatted_data = TRUE) {
##Declare/initialize function variables
#Initialize the input dataframe (tumor volumes)
input_dataframe <- data[["Tumor_volumes"]]
#Declare the pivoted long dataframe
if (formatted_data == TRUE) {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 5))
} else {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 2))
}
#Declare the vector for the day x-axis breaks
days <- vector(mode = "numeric", length = number_of_measurements)
by_days <- vector(mode = "numeric", length = 1)
##Calculate the numbers for the x-axis breaks
if (formatted_data == TRUE){
by_days <- as.numeric(format(dates, format = "%d")[2]) - as.numeric(format(dates, format = "%d")[1])
days <- seq(from = 0, length.out = number_of_measurements, by = by_days)
} else {
days <- as.numeric(unlist(stringr::str_extract_all(string = colnames(input_dataframe), pattern = "[0-9]$")))
}
##Rename the dataframes columns for plotting (based on the convention of days post treatment)
if (formatted_data == TRUE) {
colnames(input_dataframe)[4:length(input_dataframe)] <- paste0("Day", days)
} else {
colnames(input_dataframe)[seq_along(colnames(input_dataframe))] <- paste0("Day", days)
}
##Pivot the input dataframe for visualization and adjust the days post treatment column
#Pivot the dataframe
if (formatted_data == TRUE) {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 4:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
} else {
long_df <- tidyr::pivot_longer(input_dataframe, cols = seq_len(ncol(input_dataframe)), names_to = "Days_post_treatment", values_to = "Volumes")
}
#Adjust the Days_post_treatment_column
long_df$Days_post_treatment <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_treatment, pattern = "[a-zA-Z]"))
## Plot the resulting unified dataframes
if (formatted_data == TRUE) {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = rownames(long_df), color = rownames(long_df))) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
names(test_data)
##Transform the dataframes to a long format for plotting
plot_tumor_volumes = function(data, number_of_measurements, number_of_samples, dates, formatted_data = TRUE) {
##Declare/initialize function variables
#Initialize the input dataframe (tumor volumes)
input_dataframe <- data[["Tumor_volumes"]]
#Declare the pivoted long dataframe
if (formatted_data == TRUE) {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 5))
} else {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 2))
}
#Declare the vector for the day x-axis breaks
days <- vector(mode = "numeric", length = number_of_measurements)
by_days <- vector(mode = "numeric", length = 1)
##Calculate the numbers for the x-axis breaks
if (formatted_data == TRUE){
by_days <- as.numeric(format(dates, format = "%d")[2]) - as.numeric(format(dates, format = "%d")[1])
days <- seq(from = 0, length.out = number_of_measurements, by = by_days)
} else {
days <- as.numeric(unlist(stringr::str_extract_all(string = colnames(input_dataframe), pattern = "[0-9]$")))
}
##Rename the dataframes columns for plotting (based on the convention of days post treatment)
if (formatted_data == TRUE) {
colnames(input_dataframe)[4:length(input_dataframe)] <- paste0("Day", days)
} else {
colnames(input_dataframe)[seq_along(colnames(input_dataframe))] <- paste0("Day", days)
}
##Pivot the input dataframe for visualization and adjust the days post treatment column
#Pivot the dataframe
if (formatted_data == TRUE) {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 4:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
} else {
long_df <- tidyr::pivot_longer(input_dataframe, cols = seq_len(ncol(input_dataframe)), names_to = "Days_post_treatment", values_to = "Volumes")
}
#Adjust the Days_post_treatment_column
long_df$Days_post_treatment <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_treatment, pattern = "[a-zA-Z]"))
print(long_df)
## Plot the resulting unified dataframes
if (formatted_data == TRUE) {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = rownames(long_df), color = rownames(long_df))) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
##Transform the dataframes to a long format for plotting
plot_tumor_volumes = function(data, number_of_measurements, number_of_samples, dates, formatted_data = TRUE) {
##Declare/initialize function variables
#Initialize the input dataframe (tumor volumes)
input_dataframe <- data[["Tumor_volumes"]]
#Declare the pivoted long dataframe
if (formatted_data == TRUE) {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 5))
} else {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 2))
}
#Declare the vector for the day x-axis breaks
days <- vector(mode = "numeric", length = number_of_measurements)
by_days <- vector(mode = "numeric", length = 1)
##Calculate the numbers for the x-axis breaks
if (formatted_data == TRUE){
by_days <- as.numeric(format(dates, format = "%d")[2]) - as.numeric(format(dates, format = "%d")[1])
days <- seq(from = 0, length.out = number_of_measurements, by = by_days)
} else {
days <- as.numeric(unlist(stringr::str_extract_all(string = colnames(input_dataframe), pattern = "[0-9]$")))
}
##Rename the dataframes columns for plotting (based on the convention of days post treatment)
if (formatted_data == TRUE) {
colnames(input_dataframe)[4:length(input_dataframe)] <- paste0("Day", days)
} else {
colnames(input_dataframe)[seq_along(colnames(input_dataframe))] <- paste0("Day", days)
#Note: I must create a sample ID column for the plotting to work properly
input_dataframe <- mutate(.data = input_dataframe, Sample_ID = rownames(input_dataframe, .before = 1))
}
##Pivot the input dataframe for visualization and adjust the days post treatment column
#Pivot the dataframe
if (formatted_data == TRUE) {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 4:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
} else {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 2:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
}
#Adjust the Days_post_treatment_column
long_df$Days_post_treatment <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_treatment, pattern = "[a-zA-Z]"))
print(long_df)
## Plot the resulting unified dataframes
if (formatted_data == TRUE) {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Sample_ID, color = Sample_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
#ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
?mutate
##Transform the dataframes to a long format for plotting
plot_tumor_volumes = function(data, number_of_measurements, number_of_samples, dates, formatted_data = TRUE) {
##Declare/initialize function variables
#Initialize the input dataframe (tumor volumes)
input_dataframe <- data[["Tumor_volumes"]]
#Declare the pivoted long dataframe
if (formatted_data == TRUE) {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 5))
} else {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 2))
}
#Declare the vector for the day x-axis breaks
days <- vector(mode = "numeric", length = number_of_measurements)
by_days <- vector(mode = "numeric", length = 1)
##Calculate the numbers for the x-axis breaks
if (formatted_data == TRUE){
by_days <- as.numeric(format(dates, format = "%d")[2]) - as.numeric(format(dates, format = "%d")[1])
days <- seq(from = 0, length.out = number_of_measurements, by = by_days)
} else {
days <- as.numeric(unlist(stringr::str_extract_all(string = colnames(input_dataframe), pattern = "[0-9]$")))
}
##Rename the dataframes columns for plotting (based on the convention of days post treatment)
if (formatted_data == TRUE) {
colnames(input_dataframe)[4:length(input_dataframe)] <- paste0("Day", days)
} else {
colnames(input_dataframe)[seq_along(colnames(input_dataframe))] <- paste0("Day", days)
#Note: I must create a sample ID column for the plotting to work properly
input_dataframe <- dplyr::mutate(.data = input_dataframe, Sample_ID = rownames(input_dataframe, .before = 1))
}
##Pivot the input dataframe for visualization and adjust the days post treatment column
#Pivot the dataframe
if (formatted_data == TRUE) {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 4:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
} else {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 2:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
}
#Adjust the Days_post_treatment_column
long_df$Days_post_treatment <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_treatment, pattern = "[a-zA-Z]"))
print(long_df)
## Plot the resulting unified dataframes
if (formatted_data == TRUE) {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Sample_ID, color = Sample_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
#ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
rlang::last_trace()
dplyr::mutate(.data = test_data[[1]], Sample_ID = rownames(test_data[[1]], .before = 1))
dplyr::mutate(.data = test_data[[1]], Sample_ID = rownames(test_data[[1]]))
dplyr::mutate(.data = test_data[[1]], Sample_ID = rownames(test_data[[1]]), .bfore = 1)
dplyr::mutate(.data = test_data[[1]], Sample_ID = rownames(test_data[[1]]), .before = 1)
##Transform the dataframes to a long format for plotting
plot_tumor_volumes = function(data, number_of_measurements, number_of_samples, dates, formatted_data = TRUE) {
##Declare/initialize function variables
#Initialize the input dataframe (tumor volumes)
input_dataframe <- data[["Tumor_volumes"]]
#Declare the pivoted long dataframe
if (formatted_data == TRUE) {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 5))
} else {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 2))
}
#Declare the vector for the day x-axis breaks
days <- vector(mode = "numeric", length = number_of_measurements)
by_days <- vector(mode = "numeric", length = 1)
##Calculate the numbers for the x-axis breaks
if (formatted_data == TRUE){
by_days <- as.numeric(format(dates, format = "%d")[2]) - as.numeric(format(dates, format = "%d")[1])
days <- seq(from = 0, length.out = number_of_measurements, by = by_days)
} else {
days <- as.numeric(unlist(stringr::str_extract_all(string = colnames(input_dataframe), pattern = "[0-9]$")))
}
##Rename the dataframes columns for plotting (based on the convention of days post treatment)
if (formatted_data == TRUE) {
colnames(input_dataframe)[4:length(input_dataframe)] <- paste0("Day", days)
} else {
colnames(input_dataframe)[seq_along(colnames(input_dataframe))] <- paste0("Day", days)
#Note: I must create a sample ID column for the plotting to work properly
input_dataframe <- dplyr::mutate(.data = input_dataframe, Sample_ID = rownames(input_dataframe), .before = 1)
}
##Pivot the input dataframe for visualization and adjust the days post treatment column
#Pivot the dataframe
if (formatted_data == TRUE) {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 4:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
} else {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 2:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
}
#Adjust the Days_post_treatment_column
long_df$Days_post_treatment <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_treatment, pattern = "[a-zA-Z]"))
print(long_df)
## Plot the resulting unified dataframes
if (formatted_data == TRUE) {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Sample_ID, color = Sample_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
#ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
##Transform the dataframes to a long format for plotting
plot_tumor_volumes = function(data, number_of_measurements, number_of_samples, dates, formatted_data = TRUE) {
##Declare/initialize function variables
#Initialize the input dataframe (tumor volumes)
input_dataframe <- data[["Tumor_volumes"]]
#Declare the pivoted long dataframe
if (formatted_data == TRUE) {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 5))
} else {
long_df <- data.frame(matrix(nrow = nrow(input_dataframe) * number_of_measurements, ncol = 2))
}
#Declare the vector for the day x-axis breaks
days <- vector(mode = "numeric", length = number_of_measurements)
by_days <- vector(mode = "numeric", length = 1)
##Calculate the numbers for the x-axis breaks
if (formatted_data == TRUE){
by_days <- as.numeric(format(dates, format = "%d")[2]) - as.numeric(format(dates, format = "%d")[1])
days <- seq(from = 0, length.out = number_of_measurements, by = by_days)
} else {
days <- as.numeric(unlist(stringr::str_extract_all(string = colnames(input_dataframe), pattern = "[0-9]$")))
}
##Rename the dataframes columns for plotting (based on the convention of days post treatment)
if (formatted_data == TRUE) {
colnames(input_dataframe)[4:length(input_dataframe)] <- paste0("Day", days)
} else {
colnames(input_dataframe)[seq_along(colnames(input_dataframe))] <- paste0("Day", days)
#Note: I must create a sample ID column for the plotting to work properly
input_dataframe <- dplyr::mutate(.data = input_dataframe, Sample_ID = rownames(input_dataframe), .before = 1)
}
##Pivot the input dataframe for visualization and adjust the days post treatment column
#Pivot the dataframe
if (formatted_data == TRUE) {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 4:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
} else {
long_df <- tidyr::pivot_longer(input_dataframe, cols = 2:ncol(input_dataframe), names_to = "Days_post_treatment", values_to = "Volumes")
}
#Adjust the Days_post_treatment_column
long_df$Days_post_treatment <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_treatment, pattern = "[a-zA-Z]"))
print(long_df)
## Plot the resulting unified dataframes
if (formatted_data == TRUE) {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
} else {
Volume_plot <- ggplot2::ggplot(data = long_df,
mapping = aes(x = Days_post_treatment, y = Volumes, fill = Sample_ID, color = Sample_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.4, show.legend = FALSE) +
ggplot2::scale_x_continuous(breaks = days, labels = as.character(days)) +
ggplot2::ggtitle("Projected tumor volumes") +
labs(x = expression("Days post treatment"), y = expression("Tumor volumes mm"^3),
color = expression("Sample IDs"), fill = expression("Sample IDs")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
}
return(Volume_plot)
}
plot_tumor_volumes(test_data, number_of_measurements = 6, number_of_samples = 10, dates = Dates, formatted_data = FALSE)
library(tidyverse)
## Set the path to the files of interes
files_path <- c("/Users/gaborbakos/Coding/R/Tumor_volume_estimation/Backup_folders")
file_list <- list.files(files_path)
file_list
files_to_read <- file_list[grep(pattern = ".csv$", x = file_list)]
## Read in the files of interest
dfs_to_plot <- vector(mode = "list", length = length(files_to_read))
for (i in seq_along(files_to_read)) {
#dfs_to_plot[[i]] <- readr::read_tsv(file = paste0(files_path, "/", files_to_read[i]))
dfs_to_plot[[i]] <- read.csv(file = paste0(files_path, "/", files_to_read[i]), sep = ";")
}
## Do some necessary cleanup and naming
names(dfs_to_plot) <- files_to_read
dfs_to_plot[[1]]
dfs_to_plot[[2]]
names(dfs_to_plot)
## Set the path to the files of interes
files_path <- c("/Users/gaborbakos/Coding/R/Tumor_volume_estimation/COMIX_for_plotting/Overlay_plots")
file_list <- list.files(files_path)
files_to_read <- file_list[grep(pattern = ".tsv$", x = file_list)]
files_to_read <- file_list[grep(pattern = ".csv$", x = file_list)]
## Read in the files of interest
dfs_to_plot <- vector(mode = "list", length = length(files_to_read))
for (i in seq_along(files_to_read)) {
#dfs_to_plot[[i]] <- readr::read_tsv(file = paste0(files_path, "/", files_to_read[i]))
dfs_to_plot[[i]] <- read.csv(file = paste0(files_path, "/", files_to_read[i]), sep = ";")
}
## Do some necessary cleanup and naming
names(dfs_to_plot) <- files_to_read
colnames(dfs_to_plot[[1]])[c(1, 4)] <- c("Mouse_ID", "Day-4")
colnames(dfs_to_plot[[2]])[c(1, 4)] <- c("Mouse_ID", "Day-4")
##Transform the dataframes to a long format for plotting
long_df <- tidyr::pivot_longer(dfs_to_plot[[1]], cols = colnames(dfs_to_plot[[1]])[4:11], names_to = "Days_post_IR", values_to = "Volumes")
long_df$Days_post_IR <- as.numeric(stringr::str_remove_all(string = long_df$Days_post_IR, pattern = "[a-zA-Z \\.]"))
long_df2 <- tidyr::pivot_longer(dfs_to_plot[[2]], cols = colnames(dfs_to_plot[[2]])[4:11], names_to = "Days_post_IR", values_to = "uCT_volumes")
long_df2$Days_post_IR <- as.numeric(stringr::str_remove_all(string = long_df2$Days_post_IR, pattern = "[a-zA-Z \\.]"))
## Unify the two dataframes for plotting the Tumor Volumes and uCT volumes togeather
unif_long_df <- cbind(long_df, long_df2$uCT_volumes)
colnames(unif_long_df)[6] <- c("uCT_volumes")
unif_long_df2 <- tidyr::as_tibble(unif_long_df)
# Plot the Tumor control day 21 samples
ctrl_d21 <- ggplot2::ggplot(data = filter(unif_long_df2, Treatment == "T - Control Day 21"),
mapping = aes(x = Days_post_IR, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.3, show.legend = FALSE) +
ggplot2::geom_point(data = filter(unif_long_df2, Treatment == "T - Control Day 21"),
aes(x = Days_post_IR, y = uCT_volumes, shape = Mouse_ID),  size = 3, show.legend = TRUE) +
ggplot2::scale_x_continuous(breaks = c(-1, 4, 9, 13, 17, 21), labels = c("-1", "4", "9", "13", "17", "21")) +
ggplot2::ggtitle("Projected vs measured tumor volumes - tumor control day 21") +
labs(x = expression("Days post irradiation"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs"), shape = expression("uCT measurements")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ctrl_d21
# Plot the Tumor control day 21 samples
ctrl_d21 <- ggplot2::ggplot(data = filter(unif_long_df2, Treatment == "T - Control Day 21"),
mapping = aes(x = Days_post_IR, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.3, show.legend = FALSE) +
ggplot2::geom_point(data = filter(unif_long_df2, Treatment == "T - Control Day 21"),
aes(x = Days_post_IR, y = uCT_volumes, shape = Mouse_ID),  size = 3, show.legend = TRUE) +
ggplot2::scale_x_continuous(breaks = c(-1, 4, 9, 13, 17, 21), labels = c("-1", "4", "9", "13", "17", "21")) +
ggplot2::ggtitle("Projected vs measured tumor volumes - tumor control day 21") +
labs(x = expression("Days post irradiation"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs"), shape = expression("uCT measurements")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
setwd(files_path)
dev.off()
# Plot the Tumor control day 21 samples
ctrl_d21 <- ggplot2::ggplot(data = filter(unif_long_df2, Treatment == "T - Control Day 21"),
mapping = aes(x = Days_post_IR, y = Volumes, fill = Mouse_ID, color = Mouse_ID)) +
ggplot2::geom_point(show.legend = TRUE) +
#ggplot2::geom_line() +
ggalt::geom_xspline(spline_shape = -0.3, show.legend = FALSE) +
ggplot2::geom_point(data = filter(unif_long_df2, Treatment == "T - Control Day 21"),
aes(x = Days_post_IR, y = uCT_volumes, shape = Mouse_ID),  size = 3, show.legend = TRUE) +
ggplot2::scale_x_continuous(breaks = c(-1, 4, 9, 13, 17, 21), labels = c("-1", "4", "9", "13", "17", "21")) +
ggplot2::ggtitle("Projected vs measured tumor volumes - tumor control day 21") +
labs(x = expression("Days post irradiation"), y = expression("Tumor volumes mm"^3),
color = expression("Mouse IDs"), fill = expression("Mouse IDs"), shape = expression("uCT measurements")) +
ggplot2::theme_classic() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
